name: üöÄ Publish Release

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run without creating tag/release (Dry run)'
        required: false
        default: true
        type: boolean

jobs:
  extract_information:
    name: 'üîç Extract release information'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # üîç Extract Version from Directory.Build.props
      - name: üîç Extract Version
        id: extract_version
        run: |
          cd "${GITHUB_WORKSPACE}"
          # Directory.Build.props
          if [ ! -f 'Directory.Build.props' ]; then
            echo 'HEASDASD';
            echo "::error::Directory.Build.props file not found."
            exit 1
          fi

          # Extract AssemblyVersion
          assemblyVersion=$(grep -oP '(?<=<AssemblyVersion>).*?(?=</AssemblyVersion>)' Directory.Build.props)

          # Extract Version
          version=$(grep -oP '(?<=<Version>).*?(?=</Version>)' Directory.Build.props)

          if [ -z "$version" -a -z "$assemblyVersion" ]; then
            echo "::error::Unable to extract the project version."
            exit 1
          fi

          # If Version not found, use AssemblyVersion
          if [ -z "$version" ]; then
            version="$(assemblyVersion)"
          fi

          #if [ ! -z "$assemblyVersion" ]; then
          #  # Replace $(AssemblyVersion) in version with the value of assemblyVersion
          #  version=$(echo "$version" | sed "s/\$(AssemblyVersion)/$assemblyVersion/g")
          #fi

          # Ensure version is valid
          if [[ ! "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.?[0-9]+)?)?$ ]]; then
            echo "ssssss"
            echo "::error::Invalid version format in Directory.Build.props: $version"
            exit 1
          fi

          echo "Extracted and Resolved AssemblyVersion: $assemblyVersion"
          echo "Extracted and Resolved Version: $version"
          echo "Version=$version" >> $GITHUB_ENV

      # üìù Parse changelog for the version
      - name: üìù Parse changelog
        id: parse_changelog
        run: |
          version=${{ env.Version }}
          echo "Looking for version: $version"

          # Create pattern that matches:
          # - Normal versions: # v1.1.1 (24/05/2025)
          # - Prerelease versions: # v1.1.1-beta.1 (24/05/2025) or # v1.1.1-rc (24/05/2025)
          version_pattern="^# v?${version//./\\.}(-[a-zA-Z]+(\.?[0-9]+)?)? \([0-9]{2}/[0-9]{2}/[0-9]{4}\)$"
          echo "Using pattern: '$version_pattern'"

          # Debug: Show matching lines
          echo "Matching lines in CHANGELOG.md:"
          grep -En "$version_pattern" CHANGELOG.md || echo "No matches found"

          # Find the line number using extended regex
          start_line=$(grep -En "$version_pattern" CHANGELOG.md | cut -d: -f1)

          if [ -z "$start_line" ]; then
            echo "::error::Could not find version $version in CHANGELOG.md"
            echo "First few lines of CHANGELOG.md:"
            head -n 5 CHANGELOG.md
            exit 1
          fi

          # Find next version header (with prerelease support)
          next_version_pattern="^# v?[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z]+(\.[0-9]+)?)? "
          next_version_line=$(tail -n +$((start_line+1)) CHANGELOG.md | grep -En -m 1 "$next_version_pattern" | cut -d: -f1)

          if [ -z "$next_version_line" ]; then
            changelog=$(tail -n +$((start_line+1)) CHANGELOG.md)
          else
            changelog=$(tail -n +$((start_line+1)) CHANGELOG.md | head -n $((next_version_line-1)))
          fi

          # Clean up the changelog content
          changelog=$(echo "$changelog" | sed -e '/./,$!d' -e :a -e '/^\n*$/{$d;N;ba' -e '}')

          if [ -z "$changelog" ]; then
            echo "::error::Empty changelog for version $version"
            exit 1
          fi

          echo "Extracted changelog content:"
          echo "---"
          echo "$changelog"
          echo "---"

          # Use heredoc to properly handle multi-line content
          #delimiter="EOF_$(date +%s)"
          #echo "Changelog<<${delimiter}" >> $GITHUB_ENV
          #echo "$changelog" >> $GITHUB_ENV
          #echo "${delimiter}" >> $GITHUB_ENV
          echo "Changelog=$changelog" >> $GITHUB_ENV

  build:
    name: 'üõ†Ô∏è Build (${{ matrix.rid }})'
    needs: extract_information
    strategy:
      matrix:
        include:
          - rid: win-x64
            os: windows-latest
          - rid: linux-x64
            os: ubuntu-latest
          - rid: linux-arm64
            os: ubuntu-latest
          - rid: osx-x64
            os: macos-latest
          - rid: osx-arm64
            os: macos-latest

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - run: dotnet tool install Nuke.GlobalTool --global
      - run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Install libfuse2 (Linux only)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-latest-arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2 libglib2.0-0

      - run: nuke publish --rids ${{ matrix.rid }} --publish-discard-non-bundles

      - name: Upload release assets
        if: success() && !contains(steps.build.outputs.*, 'Skipped')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.rid }}
          path: |
            artifacts/publish/*.zip
            artifacts/publish/*.AppImage
            artifacts/publish/*.msi
            artifacts/publish/*.dmg
          if-no-files-found: error

  create_tag:
    name: 'üè∑Ô∏è Create Tag'
    needs: build
    if: ${{ !inputs.dry_run }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ env.Version }}" -m "Release v${{ env.Version }}"
          git push origin "${{ env.Version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create_release:
    name: 'üéâ Create Release'
    needs: create_tag
    if: ${{ !inputs.dry_run }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          path: repo

      - uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.Version }}
          name: v${{ env.Version }}
          body: ${{ env.Changelog }}
          files: release-artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}