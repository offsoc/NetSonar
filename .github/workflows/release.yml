name: üöÄ Publish Release

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run without creating tag/release (Dry run)'
        required: false
        default: true
        type: boolean

jobs:
  get_version:
    name: 'üîç Get Version'
    runs-on: ubuntu-latest
    outputs:
      base_version: ${{ steps.version.outputs.base_version }}
      release_version: ${{ steps.version.outputs.release_version }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract version from Directory.Build.props
        id: version
        run: |
          # Extract version from XML file
          VERSION=$(grep -oP '<Version>\K[^<]+' Directory.Build.props)

          # Remove -dev suffix if present
          BASE_VERSION="${VERSION%-dev}"

          # Ensure version is valid
          if [[ ! "$BASE_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
            echo "::error::Invalid version format in Directory.Build.props: $VERSION"
            exit 1
          fi

          echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "release_version=v$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "Found version: $VERSION, releasing: v$BASE_VERSION"

  create_tag:
    name: 'üè∑Ô∏è Create Tag'
    needs: get_version
    if: ${{ !inputs.dry_run }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          git tag ${{ needs.get_version.outputs.release_version }}
          git push origin ${{ needs.get_version.outputs.release_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: 'üõ†Ô∏è Build (${{ matrix.rid }})'
    needs: get_version
    strategy:
      matrix:
        include:
          - rid: win-x64
            os: windows-latest
          - rid: linux-x64
            os: ubuntu-latest
          - rid: linux-arm64
            os: ubuntu-latest-arm64
          - rid: osx-x64
            os: macos-latest
          - rid: osx-arm64
            os: macos-latest-arm64

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - run: dotnet tool install Nuke.GlobalTool --global
      - run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Install libfuse2 (Linux only)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-latest-arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2

      - run: nuke publish --rids ${{ matrix.rid }} --publish-discard-non-bundles

      - name: Upload release assets
        if: success() && !contains(steps.build.outputs.*, 'Skipped')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.rid }}
          path: |
            artifacts/publish/*.zip
            artifacts/publish/*.AppImage
            artifacts/publish/*.msi
          if-no-files-found: error

  create_release:
    name: 'üéâ Create Release'
    needs: build
    if: ${{ !inputs.dry_run }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          path: repo

      - uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Extract changelog
        id: changelog
        run: |
          VERSION="${{ needs.get_version.outputs.base_version }}"
          # Match both formats: "# 1.1.0" and "# v1.1.0"
          CHANGELOG_CONTENT=$(awk -v version="$VERSION" '
            BEGIN { print=0 }
            /^# (v)?'"${VERSION}"' / {
              print=1; next
            }
            /^# (v)?[0-9]+\.[0-9]+\.[0-9]+ / {
              if (print) exit
            }
            print { print }
          ' repo/CHANGELOG.md)

          # Escape for GitHub output
          CHANGELOG_CONTENT="${CHANGELOG_CONTENT//'%'/'%25'}"
          CHANGELOG_CONTENT="${CHANGELOG_CONTENT//$'\n'/'%0A'}"
          CHANGELOG_CONTENT="${CHANGELOG_CONTENT//$'\r'/'%0D'}"

          echo "changelog=${CHANGELOG_CONTENT}" >> $GITHUB_OUTPUT

      - uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.get_version.outputs.release_version }}
          name: Release ${{ needs.get_version.outputs.release_version }}
          body: ${{ steps.changelog.outputs.changelog }}
          files: release-artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}