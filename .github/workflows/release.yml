name: üöÄ Publish Release

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run without creating tag/release (Dry run)'
        required: false
        default: true
        type: boolean

jobs:
  extract_information:
    name: 'üîç Extract release information'
    uses: sn4k3/Actions/.github/workflows/extract-csproj-information.yml@main

  build:
    name: 'üõ†Ô∏è Build (${{ matrix.rid }})'
    needs: extract_information
    strategy:
      matrix:
        include:
          - rid: win-x64
            os: windows-latest
          - rid: linux-x64
            os: ubuntu-latest
          - rid: linux-arm64
            os: ubuntu-latest
          - rid: osx-x64
            os: macos-latest
          - rid: osx-arm64
            os: macos-latest

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - run: dotnet tool install Nuke.GlobalTool --global
      - run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Install libfuse2 (Linux only)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-latest-arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2 libglib2.0-0

      - run: nuke publish --rids ${{ matrix.rid }} --publish-discard-non-bundles

      - name: Upload release assets
        if: success() && !contains(steps.build.outputs.*, 'Skipped')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.rid }}
          path: |
            artifacts/publish/*.zip
            artifacts/publish/*.AppImage
            artifacts/publish/*.msi
            artifacts/publish/*.dmg
          if-no-files-found: error

  create_tag:
    name: 'üè∑Ô∏è Create Tag'
    needs: [build, extract_information]
    if: ${{ !inputs.dry_run }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          version="${{ needs.extract_information.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$version" -m "Release v$version"
          git push origin "$version"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create_release:
    name: 'üéâ Create Release'
    needs: [extract_information, build, create_tag]
    if: ${{ !inputs.dry_run }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          path: repo

      - uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.Version }}
          name: v${{ env.Version }}
          body: ${{ env.Changelog }}
          files: release-artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          Version: ${{ needs.extract_information.outputs.version }}
          Changelog: ${{ needs.extract_information.outputs.changelog }}